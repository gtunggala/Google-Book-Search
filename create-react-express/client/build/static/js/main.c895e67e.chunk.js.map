{"version":3,"sources":["BookSearch.js","SavedBooks.js","App.js","registerServiceWorker.js","index.js"],"names":["BookSearch","state","results","query","handleInputChange","event","_this","setState","target","value","searchForBooks","preventDefault","axios","get","concat","then","response","console","log","data","items","catch","error","saveBook","book","post","title","volumeInfo","authors","description","image","imageLinks","thumbnail","link","previewlink","_this2","this","react_default","a","createElement","onSubmit","htmlFor","id","type","onChange","map","result","key","author","rel","href","previewLink","onClick","React","Component","SavedBooks","savedBooks","fetchSavedBooks","Axios","_id","App","react_router_dom","to","react_router","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c895e67e.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass BookSearch extends React.Component {\n  state = {\n    results: [],\n    query: \"\"\n  };\n\n  handleInputChange = event => {\n    this.setState({ query: event.target.value });\n  };\n\n  searchForBooks = event => {\n    event.preventDefault();\n\n    axios\n      .get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.query}`)\n      .then(response => {\n        console.log(response.data.items);\n        this.setState({ results: response.data.items });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  saveBook = book => {\n    axios.post(\"/api/books\", {\n      title: book.volumeInfo.title,\n      authors: book.volumeInfo.authors,\n      description: book.volumeInfo.description,\n      image: book.volumeInfo.imageLinks.thumbnail,\n      link: book.volumeInfo.previewlink\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.searchForBooks}>\n          <label htmlFor=\"search\">Book Search</label>\n          <input id=\"search\" type=\"text\" onChange={this.handleInputChange} />\n\n          <button type=\"submit\">Search</button>\n        </form>\n        <hr />\n        {this.state.results.map(result => {\n          return (\n            <div key={result.id}>\n              <h2>{result.volumeInfo.title}</h2>\n              {result.volumeInfo.authors &&\n                result.volumeInfo.authors.map(author => {\n                  return <p key={author}>{author}</p>;\n                })}\n              <p>{result.volumeInfo.description}</p>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={result.volumeInfo.previewLink}\n              >\n                View\n              </a>\n              <button onClick={() => this.saveBook(result)}>Save</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default BookSearch;\n","import React from \"react\";\nimport Axios from \"axios\";\n\nclass SavedBooks extends React.Component {\n  state = {\n    savedBooks: []\n  };\n\n  componentDidMount() {\n    this.fetchSavedBooks();\n  }\n\n  fetchSavedBooks = () => {\n    Axios.get(\"/api/books\").then(response => {\n      this.setState({ savedBooks: response.data });\n    });\n  };\n  render() {\n    return (\n      <div>\n        <p>These are my saved books</p>\n        {this.state.savedBooks.map(book => {\n          return <div key={book._id}>{book.title} </div>;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default SavedBooks;\n","import React, { Component } from \"react\";\nimport BookSearch from \"./BookSearch\";\nimport SavedBooks from \"./SavedBooks\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <nav>\n          <ul>\n            <li>Google Books</li>\n            <li>\n              <Link to=\"/\">Search</Link>\n            </li>\n            <li>\n              <Link to=\"/books\">Saved</Link>\n            </li>\n          </ul>\n        </nav>\n        <div>\n          <h1>React Google Books Search</h1>\n          <p>Search and Save Books of Interest</p>\n        </div>\n        <Route path=\"/\" exact component={BookSearch} />\n        <Route path=\"/books\" component={SavedBooks} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}